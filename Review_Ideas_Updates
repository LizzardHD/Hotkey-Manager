Here's a high-level review of your code:

Organization and Structure:

The code is structured into sections for Hotkey Function, Update/Feedback/Data Functions, Main GUI Functions, and GUI Basic Structure, which is good for readability.
Global Variables:

Be cautious about using too many global variables. It can make the code harder to manage and debug. Consider using classes or functions to encapsulate related data and functionality.
Threading:

It's essential to manage threading carefully. Ensure that threads are started and stopped correctly to prevent issues like freezing the GUI or not being able to stop threads.
GUI Layout:

The GUI layout seems well-organized with frames for different components.
Action Management:

Managing actions with a list of tuples (action type, action value) is a good approach. It allows flexibility in defining actions.
OptionMenu for Hotkeys:

The use of OptionMenu for selecting hotkeys is user-friendly.
Terminal Display:

The terminal display for messages is a helpful feature for user feedback.
Saving and Loading Data:

Saving and loading actions to/from JSON files is a good way to persist data between runs.
Now, let's provide some comments and suggestions for improvement:

Consider encapsulating related functionality into classes or functions to reduce the reliance on global variables and improve code organization.

Ensure that threading is correctly managed, especially when starting and stopping threads. Avoid using global flags for this purpose, as it can lead to synchronization issues.

Add more detailed comments explaining the purpose of each function and class, input parameters, return values, and how they fit into the overall application.

Break down long functions into smaller, more manageable functions with specific responsibilities. This will improve code maintainability.

Consider using constants or enumerations for action types ("Sleep," "Mouse Click," etc.) to avoid hardcoding these values.

Validate user inputs, especially when loading actions or entering action names. Ensure that the code handles edge cases gracefully.

Consider implementing error handling to catch and handle exceptions that may arise during the program's execution.

For a user-friendly experience, you can provide tooltips or tooltips-like help messages to explain the purpose of buttons and UI elements when users hover over them.

Ensure that the UI remains responsive even when long-running operations are in progress. You can achieve this by running time-consuming tasks in separate threads and providing feedback to the user.

Continuously test the application with different scenarios to identify and address potential issues or edge cases.

Remember that improving a large codebase is an iterative process, so you can gradually make these improvements over time. Additionally, consider using version control (e.g., Git) to track changes and collaborate on improvements.